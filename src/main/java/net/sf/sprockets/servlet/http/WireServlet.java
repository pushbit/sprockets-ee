/*
 * Copyright 2016 pushbit <pushbit@gmail.com>
 *
 * This file is part of Sprockets.
 *
 * Sprockets is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Sprockets is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with Sprockets. If
 * not, see <http://www.gnu.org/licenses/>.
 */

package net.sf.sprockets.servlet.http;

import java.io.IOException;
import java.lang.reflect.Type;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.squareup.wire.ProtoAdapter;

import net.sf.sprockets.lang.Classes;

/**
 * Deserialises POSTed/PUT Protocol Buffers messages and serialises your messages to the response.
 * Override any of the {@code proto*} methods to handle requests. The Content-Type response header
 * is set to {@code application/x-protobuf}.
 * <p>
 * <strong>Note:</strong> The input and output message types must be generated by
 * <a href="https://github.com/square/wire" target="_blank">Wire</a>.
 * </p>
 *
 * @param <I>
 *            type of Protocol Buffers message that will be POSTed/PUT and deserialised as the input
 *            object. Can be Void to skip deserialisation.
 * @param <O>
 *            type of message that will be serialised to the response. Can be Void to skip
 *            serialisation.
 * @since 3.0.0
 */
public abstract class WireServlet<I, O> extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private final ProtoAdapter<I> mIn;
	private final ProtoAdapter<O> mOut;

	@SuppressWarnings("unchecked")
	public WireServlet() {
		Type[] types = Classes.getTypeArguments(getClass(), "I", "O");
		mIn = types[0] != Void.class ? ProtoAdapter.get((Class<I>) types[0]) : null;
		mOut = types[1] != Void.class ? ProtoAdapter.get((Class<O>) types[1]) : null;
	}

	/**
	 * Calls {@link #protoGet(HttpServletRequest, HttpServletResponse)}.
	 */
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		serialise(protoGet(req, resp), resp);
	}

	/**
	 * Handle a GET request.
	 *
	 * @return object to serialise to the response or null
	 */
	protected O protoGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		return null;
	}

	/**
	 * Calls {@link #protoPost(Object, HttpServletRequest, HttpServletResponse)}.
	 */
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		serialise(protoPost(deserialise(req), req, resp), resp);
	}

	/**
	 * Handle a POST request. The POSTed Protocol Buffers message is deserialised to {@code in}.
	 *
	 * @param in
	 *            null if type {@code I} is Void
	 * @return object to serialise to the response or null
	 */
	protected O protoPost(I in, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		return null;
	}

	/**
	 * Calls {@link #protoPut(Object, HttpServletRequest, HttpServletResponse)}.
	 */
	@Override
	protected void doPut(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		serialise(protoPut(deserialise(req), req, resp), resp);
	}

	/**
	 * Handle a PUT request. The PUT Protocol Buffers message is deserialised to {@code in}.
	 *
	 * @param in
	 *            null if type {@code I} is Void
	 * @return object to serialise to the response or null
	 */
	protected O protoPut(I in, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		return null;
	}

	/**
	 * Calls {@link #protoDelete(HttpServletRequest, HttpServletResponse)}.
	 */
	@Override
	protected void doDelete(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		serialise(protoDelete(req, resp), resp);
	}

	/**
	 * Handle a DELETE request.
	 *
	 * @return object to serialise to the response or null
	 */
	protected O protoDelete(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		return null;
	}

	/**
	 * Deserialise the input object from the request.
	 *
	 * @return null if type {@code I} is Void
	 */
	private I deserialise(HttpServletRequest req) throws IOException {
		return mIn != null ? mIn.decode(req.getInputStream()) : null;
	}

	/**
	 * Serialise the output object to the response.
	 */
	private void serialise(O out, HttpServletResponse resp) throws IOException {
		resp.setContentType("application/x-protobuf");
		if (mOut != null && out != null) {
			mOut.encode(resp.getOutputStream(), out);
		}
	}
}
